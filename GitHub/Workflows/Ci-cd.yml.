name: Advanced Swing Trading Bot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 9 * * 1-5'  # ◊î◊®◊¶◊î ◊õ◊ú ◊ô◊ï◊ù ◊¢◊°◊ß◊ô◊ù ◊ë-9:00 ◊ë◊ë◊ï◊ß◊® (EST)
  workflow_dispatch:  #ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        python -c "
        from main import AdvancedSwingTradingBot
        bot = AdvancedSwingTradingBot()
        print('‚úì Import successful')
        print('‚úì Tickers loaded:', len(bot.tickers))
        "

    - name: Test data fetching
      run: |
        python -c "
        import yfinance as yf
        data = yf.download('AAPL', period='1mo', interval='1d')
        print('‚úì Data fetching test successful')
        print('‚úì Data shape:', data.shape)
        "

  run-bot:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create tickers.json
      run: |
        echo '{
          "tickers": [
            "AAPL", "MSFT", "GOOGL", "AMZN", "META",
            "TSLA", "NVDA", "JPM", "V", "JNJ"
          ]
        }' > tickers.json

    - name: Run trading bot
      run: |
        python main.py

    - name: Upload signals as artifact
      uses: actions/upload-artifact@v3
      with:
        name: trading-signals
        path: |
          trading_signals.json
          trading_signals.html
          trading_bot.log

    - name: Send Telegram notification
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        if [ -f trading_signals.json ]; then
          SIGNALS=$(python -c "
          import json
          with open('trading_signals.json') as f:
              data = json.load(f)
          print(data['signals_generated'])
          ")
          
          if [ "$SIGNALS" -gt 0 ]; then
            TOP_SIGNAL=$(python -c "
            import json
            with open('trading_signals.json') as f:
                data = json.load(f)
            if data['signals']:
                signal = data['signals'][0]
                print(f'{signal[\"ticker\"]}: {signal[\"action\"]} at ${signal[\"price\"]:.2f}')
            ")
            
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="ü§ñ Trading Bot Complete - Generated $SIGNALS signals. Top: $TOP_SIGNAL"
          else
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="ü§ñ Trading Bot Complete - No signals generated today."
          fi
        else
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚ùå Trading Bot Failed - Error running bot"
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: [test, run-bot]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to server
      run: |
        echo "Deployment would happen here"
        # add your deployment commands here
        # e.g., rsync, scp, or deployment to cloud platform
